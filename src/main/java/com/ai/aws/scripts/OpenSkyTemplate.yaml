Resources:
  MySecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 2ec7557d-5e0a-4b51-a400-79d385c9dc5f

  MyBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: ai-hackathon-event-bucket-1
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 18c8b289-22bf-4251-b87c-44d90fab2d47

  MyInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: t2.micro
      KeyName: OpenSkyKeyPem
      ImageId: ami-0f34c5ae932e6f0e4
      IamInstanceProfile: !Ref MyInstanceProfile
      UserData: !Base64 
        'Fn::Sub': |
          #!/bin/bash
          mkdir /home/ec2-user/OpenSky
          mkdir /home/ec2-user/OpenSky/Data
          chown -R ec2-user:ec2-user /home/ec2-user/OpenSky/
          
          yum install -y java-1.8.0
          yum install -y inotify-tools
          yum install -y git
          yum install -y maven

          mkdir /home/ec2-user/code
          cd /home/ec2-user/code
          git clone https://pgandyai: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@github.com/rwilcom/ai_hackathon82023.git
          cd ai_hackathon82023/
          mvn clean install

          chown -R ec2-user:ec2-user /home/ec2-user/code
          aws s3 cp /home/ec2-user/code/ai_hackathon82023/target/aiHackathon082023-1.0-SNAPSHOT-jar-with-dependencies.jar s3://ai-hackathon-event-bucket-1/

          chmod +x /home/ec2-user/code/ai_hackathon82023/src/main/java/com/ai/aws/scripts/EC2toS3.sh
          nohup /home/ec2-user/code/ai_hackathon82023/src/main/java/com/ai/aws/scripts/EC2toS3.sh > /home/ec2-user/EC2toSH.log 2>&1 &
          nohup java -cp /home/ec2-user/code/ai_hackathon82023/target/aiHackathon082023-1.0-SNAPSHOT-jar-with-dependencies.jar com.ai.adapters.OpenSkyAdapter > /home/ec2-user/OpenSky.log 2>&1 &

         

      SecurityGroups:
        - !Ref MySecurityGroup
    Metadata:
      'AWS::CloudFormation::Designer':
        id: de871795-5134-475c-ab6a-50975b295655
    DependsOn:
      - MyBucket

  OpenSkyDataTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: OpenSkyData
      AttributeDefinitions:
        - AttributeName: Id
          AttributeType: S
      KeySchema:
        - AttributeName: Id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
    Metadata:
      'AWS::CloudFormation::Designer':
        id: dc89dff5-4719-4699-84a3-1664c4dab215

  MyLambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: LambdaS3DynamoAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:ListBucket'
                Resource:
                  - !GetAtt 
                    - MyBucket
                    - Arn
                  - !Sub '${MyBucket.Arn}/*'
              - Effect: Allow
                Action:
                  - 'dynamodb:PutItem'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:Query'
                  - 'dynamodb:Scan'
                  - 'dynamodb:DeleteItem'
                Resource:
                  - !GetAtt OpenSkyDataTable.Arn
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 3ba0a9d9-247d-4e2e-8057-8b764ad211d0

  # Lambda Function Definition
  S3TriggerLambda:
    Type: AWS::Lambda::Function
    DependsOn: MyInstance
    Properties:
      Handler: com.ai.aws.adapters.lambda.OpenSkyAdapterLambda::handleRequest
      Role: !GetAtt [ MyLambdaExecutionRole, Arn ]
      FunctionName: MyS3TriggerFunction
      Code:
        S3Bucket: ai-hackathon-event-bucket-1
        S3Key: aiHackathon082023-1.0-SNAPSHOT-jar-with-dependencies.jar
      Runtime: java8
      Timeout: 15  # Adjust as needed

  # S3 Event Source for Lambda
  S3BucketEventSource:
    Type: AWS::S3::Bucket
    DependsOn: MyBucket
    Properties:
      BucketName: ai-hackathon-event-bucket-1
      NotificationConfiguration:
        LambdaConfigurations:
        - Event: s3:ObjectCreated:*
          Function: !GetAtt [ S3TriggerLambda, Arn ]
          
  # Permission for S3 to trigger Lambda
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref S3TriggerLambda
      Principal: s3.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: arn:aws:s3:::ai-hackathon-event-bucket-1

  MyInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
        - !Ref MyInstanceRole
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 158a72e1-ff13-45f3-9fcb-47ea1c5e5ee2
        
  MyInstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess'
      Policies:
        - PolicyName: EC2InstanceConnect
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'ec2-instance-connect:SendSSHPublicKey'
                Resource: !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*'
                Condition:
                  StringEquals:
                    'ec2:osuser': ec2-user
        - PolicyName: S3BucketAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:PutObject'
                  - 's3:GetObject'
                  - 's3:ListBucket'
                Resource:
                  - !Sub 'arn:aws:s3:::${MyBucket}'
                  - !Sub 'arn:aws:s3:::${MyBucket}/*'
        - PolicyName: EC2CloudWatchLogsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 7afd3a06-5c30-4fdb-a7c9-8f5514b820f3
